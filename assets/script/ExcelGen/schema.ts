
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


import ByteBuf from '../luban/ByteBuf'

 
export enum EAbilityAction {
    /**
     * 修改攻防数值（可正可负）
     */
    ModifyStats = 1,
    /**
     * 直接造成伤害
     */
    DealDamage = 2,
    /**
     * 治疗
     */
    Heal = 3,
    /**
     * 赋予护甲、复活、减益等状态
     */
    GiveStatus = 4,
    /**
     * 装备一个持久性道具
     */
    GiveEquipment = 5,
    /**
     * 召唤
     */
    Summon = 6,
    /**
     * 直接获得金币
     */
    GainGold = 7,
    /**
     * 立即刷新商店
     */
    RollShop = 8,
    /**
     * 增加商店格子（临时/永久）
     */
    AddShopSlot = 9,
    /**
     * 复制另一个角色的攻防
     */
    CopyStats = 10,
    /**
     * 复制别人的技能
     */
    CopyAbility = 11,
    /**
     * 交换攻击/生命值
     */
    SwapStats = 12,
    /**
     * 远程定点攻击，不会遭反击
     */
    Snipe = 13,
    /**
     * 调整队伍站位
     */
    Push = 14,
    /**
     * 调整队伍站位
     */
    Pull = 15,
    /**
     * 调整队伍站位
     */
    Reorder = 16,
    /**
     * 移除目标身上的状态
     */
    Dispel = 17,
    /**
     * 禁止目标技能触发
     */
    Silence = 18,
    /**
     * 放大某个技能的触发次数或效果
     */
    MultiplyTrigger = 19,
}

 
 
export enum EAbilityTrigger {
    /**
     * 购买该动物时触发
     */
    OnBuy = 1,
    /**
     * 售出该动物时触发
     */
    OnSell = 2,
    /**
     * 该动物吃到食物时触发
     */
    OnEatFood = 3,
    /**
     * 动物升到下一级时触发
     */
    OnLevelUp = 4,
    /**
     * 回合商店阶段结束时触发
     */
    EndOfTurn = 5,
    /**
     * 战斗开始前触发
     */
    StartOfBattle = 6,
    /**
     * 该动物将要攻击前触发
     */
    OnBeforeAttack = 7,
    /**
     * 动物攻击时触发
     */
    OnAttack = 8,
    /**
     * 攻击动作完成后触发
     */
    OnAfterAttack = 9,
    /**
     * 该动物受到伤害时触发
     */
    OnHurt = 10,
    /**
     * 该动物死亡时触发
     */
    OnFaint = 11,
    /**
     * 该动物击杀对方时触发
     */
    OnKnockOut = 12,
    /**
     * 己方有新动物被召唤时触发
     */
    OnAllySummoned = 13,
    /**
     * 敌方有新动物被召唤时触发
     */
    OnEnemySummoned = 14,
    /**
     * 己方队友死亡时触发
     */
    OnAllyFaint = 15,
    /**
     * 前排友军攻击时触发
     */
    OnFriendAheadAttacks = 16,
    /**
     * 后排友军攻击时触发
     */
    OnFriendBehindAttacks = 17,
}

 
 
export enum EEffectArmor {
    /**
     * 正常结算护甲
     */
    Normal = 1,
    /**
     * 无视护甲与减伤，直接掉血
     */
    TrueDamage = 2,
    /**
     * 无视减伤，但仍受护盾保护
     */
    IgnoreGarlic = 3,
    /**
     * 在护甲结算之后追加伤害（不再触发 OnHurt）
     */
    AfterArmor = 4,
}

 
 
export enum EEffectDuration {
    /**
     * 立即生效一次，瞬时完成
     */
    Instant = 1,
    /**
     * 仅在本场战斗有效
     */
    Battle = 2,
    /**
     * 数值写回角色，跨回合保存
     */
    Permanent = 3,
    /**
     * 持续 N 个回合
     */
    TurnsN = 4,
    /**
     * 持续 N 次触发/攻击
     */
    HitsN = 5,
    /**
     * 直到被触发一次为止
     */
    UntilTrigger = 6,
}

 
 
export enum EEntryType {
    /**
     * 动物
     */
    Animal = 1,
    /**
     * 食物
     */
    Food = 2,
    /**
     * 装备
     */
    Equipment = 3,
}

 
 
export enum ERarity {
    /**
     * 稍弱权重
     */
    Uncommon = 1,
    /**
     * 最普通，权重最高，容易刷到
     */
    Common = 2,
    /**
     * 中低权重，功能性较突出
     */
    Rare = 3,
    /**
     * 少见，通常带复杂机制或强力技能
     */
    Epic = 4,
    /**
     * 极稀有，常作为独特/核心玩法支撑
     */
    Legendary = 5,
}

 
 
export enum EScope {
    /**
     * 单一目标
     */
    Single = 1,
    /**
     * 随机 N 个
     */
    RandomN = 2,
    /**
     * 所有单位
     */
    All = 3,
    /**
     * 溅射
     */
    AdjacentBehind = 4,
    /**
     * 最前排
     */
    FrontMost = 5,
    /**
     * 最后一位
     */
    BackMost = 6,
    /**
     * 相邻
     */
    Adjacent = 7,
    /**
     * 攻击力数值最高
     */
    HighestAttack = 8,
    /**
     * 攻击力+生命值之和最高
     */
    HighestStats = 9,
    /**
     * 当前生命值最低
     */
    LowestHP = 10,
    /**
     * 攻击力和生命值综合最弱
     */
    Weakest = 11,
    /**
     * 攻击力和生命值综合最强
     */
    Strongest = 12,
}

 
 
export enum ESide {
    /**
     * 自己
     */
    Self = 1,
    /**
     * 我方
     */
    Ally = 2,
    /**
     * 敌方
     */
    Enemy = 3,
    /**
     * 双方
     */
    Both = 4,
    /**
     * 商店动物
     */
    ShopPets = 5,
}

 
 
export enum ESlotPolicy {
    /**
     * 满了就不召唤
     */
    IgnoreIfFull = 1,
    /**
     * 挂起在队列，等空位再上
     */
    Queue = 2,
}

 
 
export enum EStacking {
    /**
     * 层数或数值累加
     */
    Stack = 1,
    /**
     * 覆盖时重置持续时间
     */
    Refresh = 2,
    /**
     * 取最大值
     */
    Max = 3,
    /**
     * 互斥，不允许共存
     */
    Exclusive = 4,
}

 
 
export enum ETier {
    /**
     * 阶段1
     */
    Tier1 = 1,
    /**
     * 阶段2
     */
    Tier2 = 2,
    /**
     * 阶段3
     */
    Tier3 = 3,
    /**
     * 阶段4
     */
    Tier4 = 4,
    /**
     * 阶段5
     */
    Tier5 = 5,
    /**
     * 阶段6
     */
    Tier6 = 6,
}

 





export class AbilityCfg {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.readInt()
        this.trigger = _buf_.readInt()
        this.perBattleCap = _buf_.readInt()
        this.chance = _buf_.readFloat()
        this.action = _buf_.readInt()
        this.conditions = _buf_.readString()
        this.targeting = _buf_.readString()
        this.params = _buf_.readString()
    }

    /**
     * 主键
     */
    readonly id: number
    /**
     * 触发枚举
     */
    readonly trigger: EAbilityTrigger
    /**
     * 每场战斗可触发上限，-1 为无限
     */
    readonly perBattleCap: number
    /**
     * 本效果触发概率
     */
    readonly chance: number
    /**
     * 技能动作
     */
    readonly action: EAbilityAction
    /**
     * json条件
     */
    readonly conditions: string
    /**
     * json目标参数
     */
    readonly targeting: string
    /**
     * json作用参数
     */
    readonly params: string

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
    }
}





export class EquipmentCfg {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.readInt()
        this.packId = _buf_.readInt()
        this.displayName = _buf_.readString()
        this.description = _buf_.readString()
        this.tier = _buf_.readInt()
        this.rarity = _buf_.readInt()
        this.abilityId = _buf_.readInt()
    }

    /**
     * 主键
     */
    readonly id: number
    /**
     * 卡包
     */
    readonly packId: number
    /**
     * 显示名
     */
    readonly displayName: string
    /**
     * 描述
     */
    readonly description: string
    /**
     * 阶段
     */
    readonly tier: ETier
    /**
     * 稀有度
     */
    readonly rarity: ERarity
    /**
     * 技能，可空填0
     */
    readonly abilityId: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
    }
}





export class FoodCfg {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.readInt()
        this.packId = _buf_.readInt()
        this.displayName = _buf_.readString()
        this.description = _buf_.readString()
        this.tier = _buf_.readInt()
        this.rarity = _buf_.readInt()
        this.abilityId = _buf_.readInt()
    }

    /**
     * 主键
     */
    readonly id: number
    /**
     * 卡包
     */
    readonly packId: number
    /**
     * 显示名
     */
    readonly displayName: string
    /**
     * 描述
     */
    readonly description: string
    /**
     * 阶段
     */
    readonly tier: ETier
    /**
     * 稀有度
     */
    readonly rarity: ERarity
    /**
     * 技能，可空填0
     */
    readonly abilityId: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
    }
}





export class ShopCfg {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.readInt()
        this.packId = _buf_.readInt()
        this.entryType = _buf_.readInt()
        this.tier = _buf_.readInt()
        this.buyCost = _buf_.readInt()
        this.weight = _buf_.readFloat()
        this.minTurn = _buf_.readInt()
        this.maxTurn = _buf_.readInt()
        this.limitPerGame = _buf_.readInt()
        this.enabled = _buf_.readBool()
    }

    /**
     * 主键
     */
    readonly id: number
    /**
     * 卡池
     */
    readonly packId: number
    /**
     * 类型
     */
    readonly entryType: EEntryType
    /**
     * 所属阶级
     */
    readonly tier: ETier
    /**
     * 买入价格
     */
    readonly buyCost: number
    /**
     * 同 Tier 内相对概率
     */
    readonly weight: number
    /**
     * 最小回合
     */
    readonly minTurn: number
    /**
     * 最大回合
     */
    readonly maxTurn: number
    /**
     * -1 不限
     */
    readonly limitPerGame: number
    /**
     * 启用？
     */
    readonly enabled: boolean

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
    }
}





export class UnitCfg {

    constructor(_buf_: ByteBuf) {
        this.animalId = _buf_.readInt()
        this.packId = _buf_.readInt()
        this.displayName = _buf_.readString()
        this.description = _buf_.readString()
        this.baseAtk = _buf_.readInt()
        this.baseHp = _buf_.readInt()
        this.abilityId = _buf_.readInt()
        this.sellRefund = _buf_.readInt()
        this.rarity = _buf_.readInt()
        { let n = Math.min(_buf_.readSize(), _buf_.size); this.tags = []; for(let i = 0 ; i < n ; i++) { let _e0; _e0 = _buf_.readString(); this.tags.push(_e0);}}
        this.token = _buf_.readString()
    }

    /**
     * 主键
     */
    readonly animalId: number
    /**
     * 卡池id
     */
    readonly packId: number
    /**
     * 展示名
     */
    readonly displayName: string
    /**
     * 描述
     */
    readonly description: string
    /**
     * 基础攻
     */
    readonly baseAtk: number
    /**
     * 基础血
     */
    readonly baseHp: number
    /**
     * 技能
     */
    readonly abilityId: number
    /**
     * 卖出价格
     */
    readonly sellRefund: number
    /**
     * 稀有度
     */
    readonly rarity: ERarity
    /**
     * 标签
     */
    readonly tags: string[]
    /**
     * 别名
     */
    readonly token: string

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class vec2 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.readFloat()
        this.y = _buf_.readFloat()
    }

    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}





export class vec3 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.readFloat()
        this.y = _buf_.readFloat()
        this.z = _buf_.readFloat()
    }

    readonly x: number
    readonly y: number
    readonly z: number

    resolve(tables:Tables) {
        
        
        
    }
}





export class vec4 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.readFloat()
        this.y = _buf_.readFloat()
        this.z = _buf_.readFloat()
        this.w = _buf_.readFloat()
    }

    readonly x: number
    readonly y: number
    readonly z: number
    readonly w: number

    resolve(tables:Tables) {
        
        
        
        
    }
}






export class UnitTable {
    private _dataMap: Map<number, UnitCfg>
    private _dataList: UnitCfg[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, UnitCfg>()
        this._dataList = []
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v: UnitCfg
            _v = new UnitCfg(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.animalId, _v)
        }
    }

    getDataMap(): Map<number, UnitCfg> { return this._dataMap; }
    getDataList(): UnitCfg[] { return this._dataList; }

    get(key: number): UnitCfg | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class AbilityTable {
    private _dataMap: Map<number, AbilityCfg>
    private _dataList: AbilityCfg[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, AbilityCfg>()
        this._dataList = []
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v: AbilityCfg
            _v = new AbilityCfg(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, AbilityCfg> { return this._dataMap; }
    getDataList(): AbilityCfg[] { return this._dataList; }

    get(key: number): AbilityCfg | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class ShopTable {
    private _dataMap: Map<number, ShopCfg>
    private _dataList: ShopCfg[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, ShopCfg>()
        this._dataList = []
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v: ShopCfg
            _v = new ShopCfg(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, ShopCfg> { return this._dataMap; }
    getDataList(): ShopCfg[] { return this._dataList; }

    get(key: number): ShopCfg | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class FoodTable {
    private _dataMap: Map<number, FoodCfg>
    private _dataList: FoodCfg[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, FoodCfg>()
        this._dataList = []
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v: FoodCfg
            _v = new FoodCfg(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, FoodCfg> { return this._dataMap; }
    getDataList(): FoodCfg[] { return this._dataList; }

    get(key: number): FoodCfg | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class EquipmentTable {
    private _dataMap: Map<number, EquipmentCfg>
    private _dataList: EquipmentCfg[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, EquipmentCfg>()
        this._dataList = []
        for(let n = _buf_.readInt(); n > 0; n--) {
            let _v: EquipmentCfg
            _v = new EquipmentCfg(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, EquipmentCfg> { return this._dataMap; }
    getDataList(): EquipmentCfg[] { return this._dataList; }

    get(key: number): EquipmentCfg | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




type ByteBufLoader = (file: string) => ByteBuf

export class Tables {
    private _UnitTable: UnitTable
    get UnitTable(): UnitTable  { return this._UnitTable;}
    private _AbilityTable: AbilityTable
    get AbilityTable(): AbilityTable  { return this._AbilityTable;}
    private _ShopTable: ShopTable
    get ShopTable(): ShopTable  { return this._ShopTable;}
    private _FoodTable: FoodTable
    get FoodTable(): FoodTable  { return this._FoodTable;}
    private _EquipmentTable: EquipmentTable
    get EquipmentTable(): EquipmentTable  { return this._EquipmentTable;}

    static getTableNames(): string[] {
        let names: string[] = [];
        names.push('unittable');
        names.push('abilitytable');
        names.push('shoptable');
        names.push('foodtable');
        names.push('equipmenttable');
        return names;
    }

    constructor(loader: ByteBufLoader) {
        this._UnitTable = new UnitTable(loader('unittable'))
        this._AbilityTable = new AbilityTable(loader('abilitytable'))
        this._ShopTable = new ShopTable(loader('shoptable'))
        this._FoodTable = new FoodTable(loader('foodtable'))
        this._EquipmentTable = new EquipmentTable(loader('equipmenttable'))

        this._UnitTable.resolve(this)
        this._AbilityTable.resolve(this)
        this._ShopTable.resolve(this)
        this._FoodTable.resolve(this)
        this._EquipmentTable.resolve(this)
    }
}

